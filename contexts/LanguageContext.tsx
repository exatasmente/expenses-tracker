"use client"

import type React from "react"
import { createContext, useContext, useState, type ReactNode } from "react"

type Language = "en" | "pt-BR"

interface Translations {
  [key: string]: {
    [key: string]: string
  }
}

const translations: Translations = {
  en: {
    addTransaction: "Add Transaction",
    description: "Description",
    amount: "Amount",
    category: "Category",
    date: "Date",
    type: "Type",
    expense: "Expense",
    income: "Income",
    submit: "Submit",
    recentTransactions: "Recent Transactions",
    reports: "Reports",
    exportCSV: "Export CSV",
    exportJSON: "Export JSON",
    importCSV: "Import CSV",
    importJSON: "Import JSON",
    budgetOverview: "Budget Overview",
    availableBalance: "Available Balance",
    financialJourney: "Your Financial Journey",
    savingsMilestone: "Savings Milestone",
    transactionStreak: "Transaction Streak",
    goalProgress: "Goal Progress",
    financialForecast: "Financial Forecast",
    settings: "Settings",
    filterByCategory: "Filter by category",
    all: "All",
    filterByType: "Filter by type",
    categoryManager: "Category Manager",
    categoryName: "Category Name",
    categoryType: "Category Type",
    selectType: "Select type",
    addCategory: "Add Category",
    edit: "Edit",
    delete: "Delete",
    editCategory: "Edit Category",
    updateCategory: "Update Category",
    fillAllFields: "Please fill in all fields",
    confirmDeleteCategory: "Are you sure you want to delete this category?",
    noTransactionData: "No transaction data available. Add some transactions to see reports.",
    categoryDistribution: "Category Distribution",
    monthlySpendingTrend: "Monthly Spending Trend",
    financialGoals: "Financial Goals",
    goalName: "Goal Name",
    targetAmount: "Target Amount",
    deadline: "Deadline",
    addGoal: "Add Goal",
    target: "Target",
    editGoal: "Edit Goal",
    updateGoal: "Update Goal",
    confirmDeleteGoal: "Are you sure you want to delete this goal?",
    installApp: "Install our app for a better experience!",
    install: "Install",
    welcomeTitle: "Welcome to the Household Expense Tracker",
    welcomeDescription: "Here's a quick guide to get you started:",
    welcomeStep1: "1. Add new expenses using the form at the top of the page.",
    welcomeStep2: "2. View and manage your expenses in the list below.",
    welcomeStep3: "3. Use the filters to sort expenses by category or payment status.",
    welcomeStep4: "4. Check your budget overview and spending reports.",
    welcomeStep5: "5. Export your data or import existing records.",
    welcomeStep6: "6. Use Ctrl+E as a shortcut to quickly add a new expense.",
    gotIt: "Got it!",
    source: "Source",
    paymentStatus: "Payment Status",
    paid: "Paid",
    pending: "Pending",
    overdue: "Overdue",
    receipt: "Receipt (optional)",
    recurringTransaction: "Recurring Transaction",
    recurrenceInterval: "Recurrence Interval",
    weekly: "Weekly",
    monthly: "Monthly",
    yearly: "Yearly",
    recurrenceEndDate: "Recurrence End Date (optional)",
    tags: "Tags (comma-separated)",
    linkToGoal: "Link to Goal (optional)",
    none: "None",
    edit: "Edit",
    delete: "Delete",
    update: "Update",
    confirmDelete: "Are you sure you want to delete this transaction?",
    totalIncome: "Total Income",
    totalExpenses: "Total Expenses",
    importNubankCsv: "Import Nubank CSV",
    importTransactions: "Import Transactions",
    monthlySummary: "Monthly Summary",
    netBalance: "Net Balance",
    topExpenseCategories: "Top Expense Categories",
    transferFlow: "Transfer Flow",
    expenseHeatmap: "Expense Heatmap",
    patternDetection: "Pattern Detection",
    potentialRecurringTransactions: "Potential Recurring Transactions",
    unusualExpenses: "Unusual Expenses",
    investmentReport: "Investment Report",
    cryptoPerformance: "Cryptocurrency Performance",
    totalInvested: "Total Invested",
    currentValue: "Current Value",
    performance: "Performance",
    averageCostPerOperation: "Average Cost per Operation",
    noDataAvailable: "No data available",
    noRecurringTransactions: "No recurring transactions detected",
    noUnusualExpenses: "No unusual expenses detected",
    noPreviewData: "No preview data available. Please upload a CSV file.",
    heatmapNotImplemented: "Heatmap visualization not yet implemented.",
    import: "Import",
    export: "Export",
    importSuccess: "Data imported successfully!",
    importError: "Error importing data. Please check the file format.",
    incomeVsExpenses: "Income vs Expenses",
    categoryDistribution: "Category Distribution",
    dailyCashFlow: "Daily Cash Flow",
    fixedVsVariableExpenses: "Fixed vs Variable Expenses",
    goalProgress: "Goal Progress",
    expenseHeatmap: "Expense Heatmap",
    heatmapNote: "This heatmap shows expense patterns by day and hour. Darker colors indicate higher spending.",
    fixed: "Fixed",
    variable: "Variable",
    days: "days",
    pickADate: "Pick a date range",
    filterByDate: "Filter by Date",
    savingsRate: "Savings Rate",
    expenseToIncomeRatio: "Expense to Income Ratio",
    financialDecisionImpact: "Financial Decision Impact",
    impact: "Impact",
    hour: "Hour",
    day: "Day",
    progress: "Progress",
    budgeting: "Budgeting",
    investing: "Investing",
    debtReduction: "Debt Reduction",
    emergencyFund: "Emergency Fund",
    incomeIncrease: "Income Increase",
    amountPaid : "Amount Paid",
  },
  "pt-BR": {
    addTransaction: "Adicionar Transação",
    description: "Descrição",
    amount: "Valor",
    category: "Categoria",
    date: "Data",
    type: "Tipo",
    expense: "Despesa",
    income: "Receita",
    submit: "Enviar",
    recentTransactions: "Transações Recentes",
    reports: "Relatórios",
    exportCSV: "Exportar CSV",
    exportJSON: "Exportar JSON",
    importCSV: "Importar CSV",
    importJSON: "Importar JSON",
    budgetOverview: "Visão Geral do Orçamento",
    availableBalance: "Saldo Disponível",
    financialJourney: "Sua Jornada Financeira",
    savingsMilestone: "Marco de Economia",
    transactionStreak: "Sequência de Transações",
    goalProgress: "Progresso das Metas",
    financialForecast: "Previsão Financeira",
    settings: "Configurações",
    filterByCategory: "Filtrar por categoria",
    all: "Todos",
    filterByType: "Filtrar por tipo",
    categoryManager: "Gerenciador de Categorias",
    categoryName: "Nome da Categoria",
    categoryType: "Tipo de Categoria",
    selectType: "Selecione o tipo",
    addCategory: "Adicionar Categoria",
    edit: "Editar",
    delete: "Excluir",
    editCategory: "Editar Categoria",
    updateCategory: "Atualizar Categoria",
    fillAllFields: "Por favor, preencha todos os campos",
    confirmDeleteCategory: "Tem certeza que deseja excluir esta categoria?",
    noTransactionData: "Nenhum dado de transação disponível. Adicione algumas transações para ver os relatórios.",
    categoryDistribution: "Distribuição por Categoria",
    monthlySpendingTrend: "Tendência de Gastos Mensais",
    financialGoals: "Metas Financeiras",
    goalName: "Nome da Meta",
    targetAmount: "Valor Alvo",
    deadline: "Prazo",
    addGoal: "Adicionar Meta",
    target: "Alvo",
    editGoal: "Editar Meta",
    updateGoal: "Atualizar Meta",
    confirmDeleteGoal: "Tem certeza que deseja excluir esta meta?",
    installApp: "Instale nosso aplicativo para uma melhor experiência!",
    install: "Instalar",
    welcomeTitle: "Bem-vindo ao Gerenciador de Despesas Domésticas",
    welcomeDescription: "Aqui está um guia rápido para começar:",
    welcomeStep1: "1. Adicione novas despesas usando o formulário no topo da página.",
    welcomeStep2: "2. Visualize e gerencie suas despesas na lista abaixo.",
    welcomeStep3: "3. Use os filtros para classificar as despesas por categoria ou status de pagamento.",
    welcomeStep4: "4. Verifique a visão geral do seu orçamento e relatórios de gastos.",
    welcomeStep5: "5. Exporte seus dados ou importe registros existentes.",
    welcomeStep6: "6. Use Ctrl+E como atalho para adicionar rapidamente uma nova despesa.",
    gotIt: "Entendi!",
    source: "Fonte",
    paymentStatus: "Status do Pagamento",
    paid: "Pago",
    amountPaid : "Valor Pago",
    pending: "Pendente",
    overdue: "Atrasado",
    receipt: "Recibo (opcional)",
    recurringTransaction: "Transação Recorrente",
    recurrenceInterval: "Intervalo de Recorrência",
    weekly: "Semanal",
    monthly: "Mensal",
    yearly: "Anual",
    recurrenceEndDate: "Data de Término da Recorrência (opcional)",
    tags: "Tags (separadas por vírgula)",
    linkToGoal: "Vincular à Meta (opcional)",
    none: "Nenhum",
    edit: "Editar",
    delete: "Excluir",
    update: "Atualizar",
    confirmDelete: "Tem certeza que deseja excluir esta transação?",
    totalIncome: "Receita Total",
    totalExpenses: "Despesa Total",
    importNubankCsv: "Importar CSV do Nubank",
    importTransactions: "Importar Transações",
    monthlySummary: "Resumo Mensal",
    netBalance: "Saldo Líquido",
    topExpenseCategories: "Principais Categorias de Despesas",
    transferFlow: "Fluxo de Transferências",
    expenseHeatmap: "Mapa de Calor de Despesas",
    patternDetection: "Detecção de Padrões",
    potentialRecurringTransactions: "Transações Potencialmente Recorrentes",
    unusualExpenses: "Despesas Incomuns",
    investmentReport: "Relatório de Investimentos",
    cryptoPerformance: "Desempenho de Criptomoedas",
    totalInvested: "Total Investido",
    currentValue: "Valor Atual",
    performance: "Desempenho",
    averageCostPerOperation: "Custo Médio por Operação",
    noDataAvailable: "Nenhum dado disponível",
    noRecurringTransactions: "Nenhuma transação recorrente detectada",
    noUnusualExpenses: "Nenhuma despesa incomum detectada",
    noPreviewData: "Nenhum dado de pré-visualização disponível. Por favor, faça o upload de um arquivo CSV.",
    heatmapNotImplemented: "Visualização do mapa de calor ainda não implementada.",
    import: "Importar",
    export: "Exportar",
    importSuccess: "Dados importados com sucesso!",
    importError: "Erro ao importar dados. Por favor, verifique o formato do arquivo.",
    incomeVsExpenses: "Receitas vs Despesas",
    categoryDistribution: "Distribuição por Categoria",
    dailyCashFlow: "Fluxo de Caixa Diário",
    fixedVsVariableExpenses: "Despesas Fixas vs Variáveis",
    goalProgress: "Progresso das Metas",
    expenseHeatmap: "Mapa de Calor de Despesas",
    heatmapNote:
      "Este mapa de calor mostra padrões de despesas por dia e hora. Cores mais escuras indicam gastos mais altos.",
    fixed: "Fixas",
    variable: "Variáveis",
    days: "dias",
    pickADate: "Escolha um intervalo de datas",
    filterByDate: "Filtrar por Data",
    savingsRate: "Taxa de Poupança",
    expenseToIncomeRatio: "Relação Despesa/Renda",
    financialDecisionImpact: "Impacto das Decisões Financeiras",
    impact: "Impacto",
    hour: "Hora",
    day: "Dia",
    progress: "Progresso",
    budgeting: "Orçamento",
    investing: "Investimento",
    debtReduction: "Redução de Dívidas",
    emergencyFund: "Fundo de Emergência",
    incomeIncrease: "Aumento de Renda",
  },
}

interface LanguageContextType {
  language: Language
  setLanguage: (lang: Language) => void
  t: (key: string) => string
}

const LanguageContext = createContext<LanguageContextType | undefined>(undefined)

export const useLanguage = () => {
  const context = useContext(LanguageContext)
  if (!context) {
    throw new Error("useLanguage must be used within a LanguageProvider")
  }
  return context
}

export const LanguageProvider: React.FC<{ children: ReactNode }> = ({ children }) => {
  const [language, setLanguage] = useState<Language>("pt-BR")

  const t = (key: string): string => {
    return translations[language][key] || key
  }

  return <LanguageContext.Provider value={{ language, setLanguage, t }}>{children}</LanguageContext.Provider>
}

